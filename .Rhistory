mean_x <- 17.2
x <- c(14.3, 15.7, 17.8, 17.5, 13.2, 18.8, 17.6, 14.3, 14.9, 17.9, 19.2)
y <- c(15.2, 16.1, 18.1, 17.6, 14.5, 19.4, 17.5, 14.1, 15.2, 18.1, 19.5)
rat <- seq(1, 11)
df <- data.frame(rat, x, y)
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * mean_x
n = 11
N = 763
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance <- (1 - n/N) * sr_squared / n
2 * sqrt(variance)
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
sr_squared
variance <- (1 - n/N) * sr_squared / n
2 * sqrt(variance)
mean_x <- 17.2
x <- c(14.3, 15.7, 17.8, 17.5, 13.2, 18.8, 17.6, 14.3, 14.9, 17.9, 19.2)
y <- c(15.2, 16.1, 18.1, 17.6, 14.5, 19.4, 17.5, 14.1, 15.2, 18.1, 19.5)
rat <- seq(1, 11)
df <- data.frame(rat, x, y)
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * mean_x
n = 11
N = 763
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance <- (1 - n/N) * sr_squared / n
2 * sqrt(variance)
#  Example 6.3 data
dat <- read.csv("table6.3", header=TRUE);
table6 <- read.csv("~/Desktop/stats480/table6.3")
View(table6)
#6.24
data <- read.csv("~/Desktop/stats480/table6.3")
data$prodperacre97 <- data$prod97 / data$acre97
#6.24
data <- read.csv("~/Desktop/stats480/table6.3")
data$prodperacre99 <- data$prod99 / data$acre99
data$prodperacre97 <- data$prod97 / data$acre97
mean_yield_99 <0 mean(data$prodperacre99)
View(data)
mean_yield_99 <- mean(data$prodperacre99)
mean_yield_99
mean_yield_97 <- mean(data$prodperacre97)
mean_yield_97
len(data$prodperacre97)
length(data$prodperacre97)
N <- 32
n <- length(data$prodperacre99)
(1 - n / N) * sd(data$prodperacre99)^2 / n
2 * sqrt((1 - n / N) * sd(data$prodperacre99)^2 / n)
bound_97 <- 2 * sqrt((1 - n / N) * sd(data$prodperacre97)^2 / n)
bound_97
n <- length(data$prodperacre99)
n
bound_99
data <- read.csv("~/Desktop/stats480/table6.3")
data$prodperacre99 <- data$prod99 / data$acre99
data$prodperacre97 <- data$prod97 / data$acre97
N <- 32
n <- length(data$prodperacre99)
mean_yield_99 <- mean(data$prodperacre99)
bound_99 <- 2 * sqrt((1 - n / N) * sd(data$prodperacre99)^2 / n)
mean_yield_97 <- mean(data$prodperacre97)
bound_97 <- 2 * sqrt((1 - n / N) * sd(data$prodperacre97)^2 / n)
bound_99
bound_97
b <- sum((y - mean(y)) * (x - mean(x))) / sum((x - mean(x))^2)
b
mean(x)
mean(y)
# B
y <- data$acre99
x <- data$acre97
b <- sum((y - mean(y)) * (x - mean(x))) / sum((x - mean(x))^2)
b
estimated_mean <- mean(y) + b * (population_mean_97 - mean(x))
population_mean_97
population_mean_97 <- 27752
estimated_mean <- mean(y) + b * (population_mean_97 - mean(x))
estimated_mean
# C
lm(data$prod99 ~ data$prod97)
# C
lm <- lm(data$prod99 ~ data$prod97)
summary(lm)
plot(data$prod97, data$prod99)
y <- data$prod99
x <- data$prod97
total_97 <- 967839 * 32
ratio <- sum(y) / sum(x)
ratio_estimator <- ratio * total_97
N = 32
n = 6
total_97 <- 967839 * N
total_97 <- 967839 * N
ratio <- sum(y) / sum(x)
ratio_estimator <- ratio * total_97
ratio_estimator
total_97
ratio <- mean(y) / mean(x)
ratio
ratio <- sum(y) / sum(x)
ratio
exercise6.1 <- read.csv("~/Desktop/stats480/exercise6.1.txt", sep="")
View(exercise6.1)
# Probelm 6.26
data <- read.csv("~/Desktop/stats480/exercise6.1.txt", sep="")
n <- length(data)
n
n <- length(data$Tree)
n
variance_simple <- N^2 * (1 - n / N) * (sd(data$Volume)^2) / n
variance_simple
dim(data)
dim(data)[1]
n <- dim(data)[1]
N <- 250
n
N
variance_simple <- N^2 * (1 - n / N) * (sd(data$Volume)^2) / n
variance_simple
total_x <- 75
y <- data$Volume
x <- data$Basal
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * total_x
total_x <- 75
y <- data$Volume
x <- data$Basal
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * total_x
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance <- (1 - n/N) * sr_squared / n
variance
variance_ratio <- (1 - n/N) * sr_squared / n
total_x <- 75
y <- data$Volume
x <- data$Basal
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * total_x
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance_ratio <- (1 - n/N) * sr_squared / n
variance_ratio
y
x
variance_simple <- N^2 * (1 - n / N) * (sd(data$Volume)^2) / n
variance_simple
y <- data$Volume
x <- data$Basal
ratio <- mean(y) / mean(x)
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance_ratio <- (1 - n/N) * sr_squared / n
variance_ratio
ratio
sr_squared
variance_ratio <- N^2 * (1 - n/N) * sr_squared / n
variance_ratio
linear <- lm(y ~ x)
linear$residuals
mean((linear$residuals)^2)
variance_simple <- N^2 * (1 - n / N) * (sd(data$Volume)^2) / n
16.03 * variance_simple
variance_simple / 16.03
variance_ratio / 8314.036
mse <- sum(e^2) / (n-2)
variance_regression <- N^2 * (1 - n/N) * mse / n
linear <- lm(y ~ x)
mse <- mean((linear$residuals)^2)
variance_regression <- N^2 * (1 - n/N) * mse / n
variance_regression
data <- read.csv("~/Desktop/stats480/exercise6.1.txt", sep="")
n <- dim(data)[1]
N <- 250
variance_simple <- N^2 * (1 - n / N) * (sd(data$Volume)^2) / n
total_x <- 75
y <- data$Volume
x <- data$Basal
ratio <- mean(y) / mean(x)
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance_ratio <- N^2 * (1 - n/N) * sr_squared / n
linear <- lm(y ~ x)
mse <- mean((linear$residuals)^2)
variance_regression <- N^2 * (1 - n/N) * mse / n
variance_regression <- 8314.036
variance_regression
x <- c(1.2, 1.2, 1.2, 1.8, 1.8, 2.5,2.5,2.5,3.4,3.4,3.4,4.2,4.2,4.2)
y <- c(0.18, 0.21, .17, .31, .34, .29, .42, .39, .45, .52, .61, .44, .62, .65, .59)
length(x) == length(y)
length(x)
length(y)
x <- c(1.2, 1.2, 1.2, 1.8, 1.8, 1.8, 2.5,2.5,2.5,3.4,3.4,3.4,4.2,4.2,4.2)
y <- c(0.18, 0.21, .17, .31, .34, .29, .42, .39, .45, .52, .61, .44, .62, .65, .59)
length(x) == length(y)
plot(x, y)
plot(lm(y ~ x))
plot(x, y)
abline(lm(y ~ x))
abline(lm(y ~ x + 0))
lm(y~x)
pop <- lm(y~x)
summary(pop)
2 * sqrt(0.0057)
temps <- read.csv("~/Desktop/stats480/temps.txt", sep="")
View(temps)
sample(1, dim(temps)[1], 10)
sample(temps$Station, 10)
temps_sample <- temps[temps$Station == random_stations, ]
random_stations <- sample(temps$Station, n_prime)
temps_sample <- temps[temps$Station == random_stations, ]
n_prime <- 10
random_stations <- sample(temps$Station, n_prime)
temps_sample <- temps[temps$Station == random_stations, ]
random_stations <- runif(1, dim(temps)[1], n_prime)
random_stations
random_stations <- runif( n_prime, 1, dim(temps)[1])
random_stations
random_stations <- sample(1:dim(temps)[1],  n_prime)
random_strations
random_stations
temps_sample <- temps[random_stations, ]
temps_sample
random_stations <- sample(1:dim(temps)[1],  n_prime)
temps_sample <- temps[random_stations, ]
temps <- temps[:, c('JP', 'MP')]
temps <- temps[, c('JP', 'MP')]
temps
temps <- read.csv("~/Desktop/stats480/temps.txt", sep="")
temps <- temps[, c('JP', 'MP')]
n_prime <- 10
random_stations <- sample(1:dim(temps)[1],  n_prime)
temps_sample <- temps[random_stations, ]
temps_samp[le]
temps_sample
preliminary_variance <- var(temps_sample$JP)
temps <- read.csv("~/Desktop/stats480/temps.txt", sep="")
temps <- temps[, c('JP', 'MP')]
N <- dim(temps)[1]
n_prime <- 15
random_stations <- sample(1:N,  n_prime)
temps_sample <- temps[random_stations, ]
ratio <- mean(temps_sample$MP) / mean(temps_sample$JP)
ratio
bound <- ((temps_sample$MP - (ratio * temps$JP))^2) / (n_prime - 1)
((temps_sample$MP - (ratio * temps$JP))^2)
temps_sample$MP - (ratio * temps$JP
z
(temps_sample$MP - (ratio * temps$JP)
)
ratio
ratio * temps$JP
bound <- ((temps_sample$MP - (ratio * temps_sample$JP))^2) / (n_prime - 1)
bound
((temps_sample$MP - (ratio * temps_sample$JP))^2)
bound <- sum((temps_sample$MP - (ratio * temps_sample$JP))^2) / (n_prime - 1)
bound
temps <- read.csv("~/Desktop/stats480/temps.txt", sep="")
temps <- temps[, c('JP', 'MP')]
N <- dim(temps)[1]
n_prime <- 15
random_stations <- sample(1:N,  n_prime)
temps_sample <- temps[random_stations, ]
jan_pop_mean <- mean(temps$JP)
y <- temps_sample$MP
x <- temps_sample$JP
ratio <- mean(y) / mean(x)
ratio_estimator <- ratio * jan_pop_mean
sr_squared <- sum((y - ratio*x)^2) / (n - 1)
variance <- (1 - n/N) * sr_squared / n
bound <- 2 * sqrt(variance)
ratio_estimator
bound
b <- sum((y - mean(y)) * (x - mean(x))) / sum((x - mean(x))^2)
estimated_mean <- mean(y) + b * (2.5 - mean(x))
estimated_milliliters_per_second <- mean(y) + b * (2.5 - mean(x))
estimated_milliliters_per_second
b <- sum((y - mean(y)) * (x - mean(x))) / sum((x - mean(x))^2)
b
x <- c(1.2, 1.2, 1.2, 1.8, 1.8, 1.8, 2.5,2.5,2.5,3.4,3.4,3.4,4.2,4.2,4.2)
y <- c(0.18, 0.21, .17, .31, .34, .29, .42, .39, .45, .52, .61, .44, .62, .65, .59)
b <- sum((y - mean(y)) * (x - mean(x))) / sum((x - mean(x))^2)
estimated_milliliters_per_second <- mean(y) + b * (2.5 - mean(x))
estimated_milliliters_per_second
y_est <- mean(y) + b * (x - mean(x))
y_est
mse <- (y_est - y)^2
mse
mse <- mean((y_est - y)^2)
y_est <- mean(y) + b * (x - mean(x))
mse <- mean((y_est - y)^2)
mse
bound <- mse / 15
bound
mse
sqrt(0.0001)
estimated_milliliters_per_second
x_2.5 <- c(0.42, 0.39, 0.45)
estimated_milliliters_per_second - x_2.5
mse <- mean((estimated_milliliters_per_second - x_2.5)^2)
bound <- mse / 15
bound
estimated_milliliters_per_second
estimated_milliliters_per_second - x_2.5
bound <- (1 - 3 / 15) * mse / 3
bound
bound <- (1 - 3 / 15) * mse / 15
(1 - 3 / 15) * mse / 15
mse
bound <- (1 - 3 / 15) * mse / 3
bound
estimated_milliliters_per_second
x <- c(1.2, 1.2, 1.2, 1.8, 1.8, 1.8, 2.5,2.5,2.5,3.4,3.4,3.4,4.2,4.2,4.2)
y <- c(0.18, 0.21, .17, .31, .34, .29, .42, .39, .45, .52, .61, .44, .62, .65, .59)
mx <- 2.5
r <- sum(y) / sum(x)
ratio_est <- mx * r
ratio_est
sr_squared <- (sum((y - r*x)^2)) / (n-1)
n <- 15
sr_squared <- (sum((y - r*x)^2)) / (n-1)
var_est <- (sr_squared / n)
bound <- 2 * sqrt(var_est)
bound
shuttle <-read.csv("http://dept.stat.lsa.umich.edu/~bbh/s485/data/SpaceShuttle.csv")
probit_mod =glm(Fail~Temperature, data=shuttle, family=binomial('probit'))
prediction_probit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
probit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
probit_mod_simulator = function(){
probs <-predict(probit_mod, type='response')
data.frame(Fail=rbinom(length(probs), 1, probs),Temperature = shuttle$Temperature)
}
probit_30F_pred = function(bootspl) {
refitted.mod <-update(probit_mod, data=bootspl)
predict(refitted.mod, type='response', newdata=data.frame(Temperature=30))
}
rboot <- function(statistic, simulator, B) {
tboots <-replicate(B,statistic(simulator()))
if (is.null(dim(tboots))) {
tboots <-array(tboots, dim =c(1, B))
}
return(tboots)
}
bootstats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
average_boot <- mean(bootstats)
bias <- average_boot - prediction_logit
standard_error <- sd(bootstats) / length(bootstats)
mse <- mean((bootstats - prediction_logit)^2)
standard_error
bootstrap <-function(tboots, summarizer, ...) {
summaries <-apply(tboots, 1, summarizer, ...)
return(t(summaries))
}
bootstrap <-function(tboots, summarizer, ...) {
summaries <-apply(tboots, 1, summarizer, ...)
return(t(summaries))
}
bootstrap(boot.stats, sd)
boot.stats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
boot.stats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
bootstrap(boot.stats, sd)
coef(probit_mod)
probit_mod =glm(Fail~Temperature, data=shuttle, family=binomial('probit'))
prediction_probit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
shuttle <-read.csv("http://dept.stat.lsa.umich.edu/~bbh/s485/data/SpaceShuttle.csv")
probit_mod =glm(Fail~Temperature, data=shuttle, family=binomial('probit'))
prediction_probit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
probit_mod_simulator = function(){
probs <-predict(probit_mod, type='response')
data.frame(Fail=rbinom(length(probs), 1, probs),Temperature = shuttle$Temperature)
}
probit_30F_pred = function(bootspl) {
refitted.mod <-update(probit_mod, data=bootspl)
predict(refitted.mod, type='response', newdata=data.frame(Temperature=30))
}
rboot <- function(statistic, simulator, B) {
tboots <-replicate(B,statistic(simulator()))
if (is.null(dim(tboots))) {
tboots <-array(tboots, dim =c(1, B))
}
return(tboots)
}
boot.stats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
bootstrap <-function(tboots, summarizer, ...) {
summaries <-apply(tboots, 1, summarizer, ...)
return(t(summaries))
}
bootstrap(boot.stats, sd)
coef(probit_mod)
coef(logit_mod)
bootstats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
bootstrap <-function(tboots, summarizer, ...) {
summaries <-apply(tboots, 1, summarizer, ...)
return(t(summaries))
}
bootstrap(bootstats, sd)
coef(logit_mod)
mutildebar = bootstrap(bootstats, mean)
mutildebar
bias <- mutildebar - prediction_logit
bias
bootstats
mse <- bootstrap(bootstats, sd)^2 + bias^2
mse
coef(logit_mod)
?pt
pt(prediction_logit, 21)
shuttle <-read.csv("http://dept.stat.lsa.umich.edu/~bbh/s485/data/SpaceShuttle.csv")
View(shuttle)
t.test(prediction_logit, 0.97)
rnorm(10)
shuttle <-read.csv("http://dept.stat.lsa.umich.edu/~bbh/s485/data/SpaceShuttle.csv")
probit_mod =glm(Fail~Temperature, data=shuttle, family=binomial('probit'))
prediction_probit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
probit_mod_simulator = function(){
probs <-predict(probit_mod, type='response')
data.frame(Fail=rbinom(length(probs), 1, probs),Temperature = shuttle$Temperature)
}
probit_30F_pred = function(bootspl) {
refitted.mod <-update(probit_mod, data=bootspl)
predict(refitted.mod, type='response', newdata=data.frame(Temperature=30))
}
rboot <- function(statistic, simulator, B) {
tboots <-replicate(B,statistic(simulator()))
if (is.null(dim(tboots))) {
tboots <-array(tboots, dim =c(1, B))
}
return(tboots)
}
bootstats<-rboot(probit_30F_pred, probit_mod_simulator, 1e3)
bootstrap <-function(tboots, summarizer, ...) {
summaries <-apply(tboots, 1, summarizer, ...)
return(t(summaries))
}
standard_error <- bootstrap(bootstats, sd)
mutildebar = bootstrap(bootstats, mean)
bias <- mutildebar - prediction_logit
mse <- bootstrap(bootstats, sd)^2 + bias^2
# 3
bootstats
t.test(bootstats, 0.97)
(prediction_logit - 0.97) / standard_error
t <- (prediction_logit - 0.97) / standard_error
pt(t, 21)
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'response')
prediction_logit
mutildebar
t <- (mutildebar - 0.97) / standard_error
final <- 1 - pt(t, 21)
final
?preditg
?predict
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30))
prediction_logit
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'standard error')
prediction_logit <- predict(probit_mod, newdata=data.frame(Temperature=30), type = 'terms')
prediction_logit
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
for_se <- predict(probit_mod, newdata=data.frame(Temperature=30), se.fit = TRUE)
for_se$se.fit
shuttle <-read.csv("http://dept.stat.lsa.umich.edu/~bbh/s485/data/SpaceShuttle.csv")
logit_mod =glm(Fail~Temperature, data=shuttle, family=binomial)
for_se <- predict(probit_mod, newdata=data.frame(Temperature=30), se.fit = TRUE)
st_error <- for_se$se.fit
shiny::runApp('Desktop/crypto/research_infrastructure')
shiny::runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
runApp('Desktop/crypto/research_infrastructure')
shiny::runApp('Desktop/crypto/research_infrastructure')
runApp()
shiny::runApp()
install.packages("shinythemes")
runApp()
install.packages("shinyjs")
install.packages("dplyr")
install.packages("xtable")
install.packages("knitr")
install.packages("stringr")
install.packages("shinydashboard")
install.packages("rdrop2")
runApp()
runApp()
